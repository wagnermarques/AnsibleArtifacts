#+Title: Container p/ C/C++ Development

* introducao
  Esse playbook apenas gera uma imagem de container com gcc
  instalado. Depois, a ideia e trabalhar com llvm tambem...

* gerando o container
  
  
#+NAME: parseShellAnsiColorCharacters
#+BEGIN_SRC elisp :session s1 :var data=""  :results silent  :exports node
  (print (ansi-color-apply data))
#+END_SRC

Primeiro vamos dar uma olhada nos arquivos que temos aqui no diretorio
do nosso playbook.

#+NAME: visualizando dir do playbook
#+BEGIN_SRC shell :session s1 :results output :exports both :post parseShellAnsiColorCharacters(data=*this*)
  export playbookDir=/home/wagner/fzlbpms/submodules/ansible-artifacts/playbook-container-docker-cc++
  cd $playbookDir
  ls -l
#+END_SRC

O comando ls -l mostra que temo o arquivo site.yml que e nosso
playbook e temos um script run-ansible-playbook.sh que serve pra gente
rodar nosso playbook.

Se vc quizer criar um container debian10 modifique o
run-ansible-playbook.sh pra usar o arquivo
extra-vars-debian10slim.json como parametros para o playbook, caso
queira um fedora 33 use o arquivo extra-vars-fedora33.json


#+RESULTS: visualizando dir do playbook
#+begin_example

 [wagner@wagner-Insp153567 playbook-container-docker-cc++]$ total 36
drwxr-xr-x 2 wagner wagner 4096 jan 31 15:22 bin
drwxr-xr-x 2 wagner wagner 4096 jan 31 15:23 c++_projexample
drwxr-xr-x 2 wagner wagner 4096 jan 31 14:44 c_projexample
-rw-r--r-- 1 wagner wagner  359 jan 31 13:39 extra-vars-debian10slim.json
-rw-r--r-- 1 wagner wagner  339 jan 31 10:10 extra-vars-fedora33.json
-rw-r--r-- 1 wagner wagner  127 jan 29 22:47 hosts
-rw-r--r-- 1 wagner wagner 1924 jan 31 15:30 README.org
-rwxr-xr-x 1 wagner wagner  120 jan 31 10:31 run-ansible-playbook.sh
-rw-r--r-- 1 wagner wagner  227 jan 31 10:23 site.yml
#+end_example



entao, pra criar o container basta fazer o seguinte...


#+NAME: run-ansible-playbook.sh
#+BEGIN_SRC shell :session s1 :results output :exports both :post parseShellAnsiColorCharacters(data=*this*)
  export playbookDir=/home/wagner/fzlbpms/submodules/ansible-artifacts/playbook-container-docker-cc++
  cd $playbookDir
  ./run-ansible-playbook.sh
#+END_SRC

* agora pra compilar um hello world

  Pra rodar o gcc dentro do container a gente vai usar ./bin/gcc.sh e
  pra rodar o g++ a gente vai usar o g++.sh

  o diretorio do projeto precisa ser configurado dentro do gcc.sh ou
  do g++.sh 
  
  temos dois programas hello world pra compilar, um no diretorio
  ./c_projexample e outro no diretorio ./c++_projexample, veja os
  conteudo desses diretorios abaixo...

  Vamos ver primeiro o diretorio c_projexample

#+NAME: ./bin/gcc.sh helloworld.c
#+BEGIN_SRC shell :session s1 :results output :exports both  :post parseShellAnsiColorCharacters(data=*this*)
  export playbookDir=/home/wagner/fzlbpms/submodules/ansible-artifacts/playbook-container-docker-cc++
  cd $playbookDir
  ./bin/gcc.sh helloworld.c
  cd ./c_projexample
  ls -l
#+END_SRC

#+RESULTS: ./bin/gcc.sh helloworld.c
: 
:  [wagner@wagner-Insp153567 playbook-container-docker-cc++]$ projDirFullPath
:  [wagner@wagner-Insp153567 c_projexample]$ total 24
: -rwxr-xr-x 1 wagner wagner 16616 jan 31 15:57 a.out
: -rw-r--r-- 1 wagner wagner    69 jan 31 13:51 helloworld.c

Olhando a saida abaixo , veja que temos um helloworld.c que vamos
compilar... caso aparece um a.out é porque eu ja tinha feito alguma
compilacao anterior. a.out sera a saida do do arquivo compilado.


Agora, compilando um helloworkl.cpp

#+NAME:./bin/g++.sh
#+BEGIN_SRC shell :session s1 :results output :exports both :post parseShellAnsiColorCharacters(data=*this*)
  playbookDir=/home/wagner/fzlbpms/submodules/ansible-artifacts/playbook-container-docker-cc++
  cd $playbookDir
  $playbookDir/bin/g++.sh helloworld.cpp #gcc.sh precisa so do nome do arquivo, ele ja sabe em qual dir ele esta  
  ls ./c++_projexample
#+END_SRC

#+RESULTS: ./bin/g++.sh
: 
:  [wagner@wagner-Insp153567 playbook-container-docker-cc++]$ projDirFullPath
:  a.out  helloworld.cpp




