---
# This playbook deploys a simple standalone JBoss server.
# https://blog.tomecek.net/post/building-containers-with-buildah-and-ansible/

- hosts: local_machine
  become: yes
  become_method: su
  become_user: root

  vars:
    container_name: "{{ default_container_name }}"
    container_image: "{{ default_container_image }}"
    postgres_user_password: "admin123"
  tasks:    
  - name: Make the base image available
    docker_image:
      name: '{{ container_image }}'

  - name: Create the container
    docker_container:
      image: '{{ container_image }}'
      name: '{{ container_name }}'
      command: sleep infinity
      ports: "{{ container_ports }}"
      exposed_ports: "{{ container_ports }}"
      published_ports: "{{ container_ports }}"

  - name: Add the newly created container to the inventory
    add_host:
      hostname: '{{ container_name }}'
      ansible_connection: docker
      ansible_python_interpreter: /usr/bin/python3  # fedora container doesn't ship python2

 # - name: installing pyhton in container
 #   dnf:
 #     name: nmap, findutils, procps
 #     state: present
 #   delegate_to: '{{ container_name }}'

  - name: Add the postgres user
    user:
      name: postgres
      shell: /bin/bash
      password: "{{ postgres_user_password | password_hash('sha512') }}"
      update_password: always
      append: yes
    register: created_user
    delegate_to: '{{ container_name }}'

#  - name: Debugging posgres username created
#    debug:
#      msg: "{{ created_user }}"
    
  - name: creating "{{ pgsql_data_path_in_container }}" directory with postgres owner
    file:
      path: "{{ pgsql_data_path_in_container }}"
      state: directory
      owner: "{{ created_user.name }}"
      recurse: yes
    delegate_to: '{{ container_name }}'
    register: pgsqlDataDir

  - name: Debugging directory created
    debug:
      msg: "{{ pgsqlDataDir }}"
  
  - name: include role postgresql-install-in-fedora
    import_role: 
      name: postgresql-install-in-fedora
    delegate_to: '{{ container_name }}'

  - name:  ls -l "{{ pgsqlDataDir.path }}"
    command: ls -l "{{ pgsqlDataDir.path }}"
    become: yes
    become_user: postgres
    delegate_to: '{{ container_name }}'
    register: lsPgsqlDataDir

  - name: Debugging ls -l "{{ pgsqlDataDir.path }}"
    debug:
      msg: "{{ lsPgsqlDataDir }}"
     
  - name:  /usr/bin/pg_ctl init -D "{{ pgsql_data_path_in_container }}" as postgres user
    command: /usr/bin/pg_ctl init -D "{{ pgsql_data_path_in_container }}"
    become: yes
    become_user: postgres
    delegate_to: '{{ container_name }}'


  - name:  ls -l "{{ pgsqlDataDir.path }}"
    command: ls -l "{{ pgsqlDataDir.path }}"
    become: yes
    become_user: postgres
    delegate_to: '{{ container_name }}'
    register: lsPgsqlDataDir

  - name: Debugging ls -l "{{ pgsqlDataDir.path }}"
    debug:
      msg: "{{ lsPgsqlDataDir }}"
  
#  - name:  cat "{{ pgsql_data_path_in_container }}"/postgresql.conf
#    command: cat "{{ pgsql_data_path_in_container }}"/postgresql.conf > "{{ pgsql_data_path_in_container }}"/postgresql-bk.conf
#    become: yes
#    become_user: postgres
#    delegate_to: '{{ container_name }}'

#  - name: copying postgresql.conf (follow yes to overrride file)
#    copy:
#      src: "{{ postgresql_conf_source_file }}"
#      dest: "{{ postgresql_conf_destination_file }}"
#      follow: yes
#    delegate_to: '{{ container_name }}'  

#  - name: copying pg_hba.conf (follow yes to overrride file)
#    copy:
#      src: "{{ pg_hba_conf_source_file }}"
#      dest: "{{ pg_hba_conf_destination_file }}"
#      follow: yes
#    delegate_to: '{{ container_name }}'  

  - name: /usr/bin/pg_ctl start -D "{{pgsql_data_path_in_container}}" -l logfile start  as postgres user
    command: /usr/bin/pg_ctl -D "{{ pgsql_data_path_in_container }}" -l  "{{pgsql_data_path_in_container}}"/.logfile start
    become: yes
    become_user: postgres
    delegate_to: '{{ container_name }}'
    
#    args:
#      apply:
#        delegate_to:  '{{ container_name }}'

#  - name: Run the postgresql install role in the container
#    delegate_to: '{{ container_name }}'
#    include_role:
#      name: postgresql-install-in-fedora

      
#  - name: Commit the container
#    command: docker commit \
#      -c 'CMD ["nginx", "-g", "daemon off;"]' \
#      {{ container_name }} {{ image_name }}

#  - name: Remove the container
#    docker_container:
#      name: '{{ container_name }}'
#      state: absent
#    - name: restarting docker daemon with reaload
#      systemd:
#        state: restarted
#        daemon_reload: yes
#        name: docker

#    - name: pull mcr.microsoft.com/mssql/server docker image
#      docker_image:
#        name: "{{ default_container_image }}"
#        state: present

#    - name: runs mcr.microsoft.com/mssql/server docker image
#      docker_container:
#        name: "{{ default_container_name }}"
#        state: started
#        restart_policy: always
#        image: "{{ default_container_image }}"
#        volumes:
#          - "{{ default_container_volumes_from_path }}"
#        env:
#          ACCEPT_EULA: "Y"
#          SA_PASSWORD: "admin123"
       
  
#    - name: "show some important facts"
#      ansible.builtin.debug:
#        msg:
#          - "{{ ansible_facts['all_ipv4_addresses'] }}"
#          - "{{ ansible_facts['env'] }}"
#          - "{{ ansible_facts['env']['FZL_HOME'] }}"
#          - "{{ playbook_dir }}"
#          - "{{ ansible_facts['lsb'] }}"
#          - "{{ ansible_facts['lsb']['id'] }}"
#          - "{{ ansible_facts['mounts'] }}"
#          - "{{ ansible_facts['python'] }}"
#          - "{{ ansible_facts['selinux'] }}"
#          - "{{ ansible_facts['os_family'] }}"

#    - name: This Playbook features
#      debug:
#        msg: "{{ item }}"
#      with_items:
#        - ==>show some relevant facts
#        - ==>install python docker docker-py for ansible and docker work requirements
#        - ==>pull postgresql docker container image
#        - ==>runs postgresql docker image
#          
#    - name:  install python docker module for ansible and docker works together 
#      pip:
#        name: "{{ item.name }}"
#        state: present
#      with_items:
#        - { name: docker}

#    - name: remove docker-py because its do not works with docker with python module
#      pip:
#        name: "{{ item.name }}"
#        state: absent
#      with_items:
#        - { name: docker-py}

